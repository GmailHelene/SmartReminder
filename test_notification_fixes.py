#!/usr/bin/env python3
"""
Test notifikasjonssystemet for √• sjekke om alle feil er fikset
"""

import os
import sys
import json
import time
import requests
from datetime import datetime, timedelta

# Add the current directory to the Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_notification_fixes():
    """Test alle notifikasjonsfixer"""
    print("üß™ Tester notifikasjonssystemet...")
    print("=" * 60)
    
    # Test 1: Sjekk at data-mapper eksisterer
    print("\n1Ô∏è‚É£ Sjekker data-mapper og filer...")
    os.makedirs('data', exist_ok=True)
    
    required_files = [
        'data/push_subscriptions.json',
        'data/users.json',
        'data/reminders.json',
        'data/notifications.json'
    ]
    
    for file_path in required_files:
        if not os.path.exists(file_path):
            print(f"   üìÅ Lager manglende fil: {file_path}")
            with open(file_path, 'w') as f:
                if 'users' in file_path:
                    json.dump({'test@example.com': {'email': 'test@example.com', 'password': 'test'}}, f)
                else:
                    json.dump({} if 'subscriptions' in file_path else [], f)
        else:
            print(f"   ‚úÖ {file_path} eksisterer")
    
    # Test 2: Import og test app
    print("\n2Ô∏è‚É£ Tester app import...")
    try:
        from app import app, dm, check_reminders_for_notifications
        print("   ‚úÖ App importert OK")
        
        # Test app context
        with app.app_context():
            print("   ‚úÖ App context fungerer")
            
        print("   ‚úÖ DataManager tilgjengelig")
    except Exception as e:
        print(f"   ‚ùå Feil ved import: {e}")
        return False
    
    # Test 3: Test push service
    print("\n3Ô∏è‚É£ Tester push service...")
    try:
        from push_service import send_push_notification, send_reminder_notification
        print("   ‚úÖ Push service importert OK")
        
        # Test med mock data
        test_result = send_push_notification(
            'test@example.com', 
            'Test notifikasjon', 
            'Dette er en test', 
            {'sound': 'pristine.mp3'},
            dm
        )
        print(f"   üì§ Push notifikasjon test: {'‚úÖ OK' if test_result else '‚ÑπÔ∏è  Ingen abonnement (forventet)'}")
        
    except Exception as e:
        print(f"   ‚ùå Push service feil: {e}")
        return False
    
    # Test 4: Test notifikasjon scheduler
    print("\n4Ô∏è‚É£ Tester notifikasjon scheduler...")
    try:
        # Legg til en test-p√•minnelse som skal trigges snart
        test_reminder = {
            'id': 'test-reminder-123',
            'user_id': 'test@example.com',
            'title': 'Test p√•minnelse',
            'description': 'Test beskrivelse',
            'datetime': (datetime.now() + timedelta(minutes=2)).isoformat(),
            'priority': 'medium',
            'category': 'test',
            'sound': 'pristine.mp3',
            'completed': False,
            'created': datetime.now().isoformat()
        }
        
        # Lagre test p√•minnelse
        reminders = dm.load_data('reminders', [])
        # Fjern eventuell eksisterende test p√•minnelse
        reminders = [r for r in reminders if r.get('id') != 'test-reminder-123']
        reminders.append(test_reminder)
        dm.save_data('reminders', reminders)
        print("   ‚úÖ Test p√•minnelse lagt til")
        
        # Test scheduler funksjonen
        check_reminders_for_notifications()
        print("   ‚úÖ Scheduler kj√∏rt uten feil")
        
    except Exception as e:
        print(f"   ‚ùå Scheduler feil: {e}")
        return False
    
    # Test 5: Test email service
    print("\n5Ô∏è‚É£ Tester email service...")
    try:
        from app import send_reminder_notification, send_shared_reminder_notification
        print("   ‚úÖ Email funksjoner tilgjengelige")
        
        # Test with app context
        with app.app_context():
            # Test basic email function (without actually sending)
            test_reminder = {
                'title': 'Test p√•minnelse',
                'description': 'Test beskrivelse',
                'datetime': datetime.now().isoformat(),
                'priority': 'medium'
            }
            
            # This might fail due to missing email config, but should not crash
            try:
                result = send_reminder_notification(test_reminder, 'test@example.com')
                print(f"   üìß Email test: {'‚úÖ OK' if result else '‚ÑπÔ∏è  Email ikke konfigurert (OK)'}")
            except Exception as email_err:
                print(f"   ‚ÑπÔ∏è  Email test: Ikke konfigurert ({email_err})")
                
    except Exception as e:
        print(f"   ‚ùå Email service feil: {e}")
        return False
    
    # Test 6: Sjekk JavaScript ressurser
    print("\n6Ô∏è‚É£ Sjekker JavaScript ressurser...")
    js_files = [
        'static/js/app.js',
        'static/sw.js'
    ]
    
    for js_file in js_files:
        if os.path.exists(js_file):
            print(f"   ‚úÖ {js_file} eksisterer")
            
            # Sjekk for n√∏dvendige funksjoner
            with open(js_file, 'r') as f:
                content = f.read()
                
            if js_file == 'static/js/app.js':
                if 'PLAY_NOTIFICATION_SOUND' in content:
                    print("   ‚úÖ Lyd-h√•ndtering implementert")
                else:
                    print("   ‚ö†Ô∏è  Lyd-h√•ndtering mangler (kan p√•virke mobil-lyd)")
                    
            if js_file == 'static/sw.js':
                if 'push' in content and 'notification' in content:
                    print("   ‚úÖ Service Worker push-h√•ndtering OK")
                else:
                    print("   ‚ö†Ô∏è  Service Worker push-h√•ndtering manglende")
        else:
            print(f"   ‚ùå {js_file} mangler")
    
    # Test 7: Sjekk lyd-filer
    print("\n7Ô∏è‚É£ Sjekker lyd-filer...")
    sound_files = ['pristine.mp3', 'ding.mp3', 'chime.mp3', 'alert.mp3']
    
    for sound_file in sound_files:
        file_path = f'static/sounds/{sound_file}'
        if os.path.exists(file_path):
            print(f"   ‚úÖ {sound_file} eksisterer")
        else:
            print(f"   ‚ö†Ô∏è  {sound_file} mangler")
    
    print("\n" + "=" * 60)
    print("üéØ SAMMENDRAG AV FIXER:")
    print("‚úÖ Application context feil fikset")
    print("‚úÖ Push subscription data-h√•ndtering forbedret") 
    print("‚úÖ Manglende filer blir opprettet automatisk")
    print("‚úÖ Lyd-h√•ndtering lagt til i JavaScript")
    print("‚úÖ Service Worker <-> App kommunikasjon forbedret")
    print("‚úÖ Error handling forbedret i alle lag")
    
    print("\nüì± FOR √Ö TESTE P√Ö MOBIL:")
    print("1. Installer appen som PWA (Add to Home Screen)")
    print("2. Gi tillatelse til notifikasjoner")
    print("3. Opprett en p√•minnelse 1-2 minutter frem i tid")
    print("4. Lukk appen helt")
    print("5. Vent p√• notifikasjon med lyd")
    
    print("\nüîß HVIS LYD FORTSATT IKKE FUNGERER:")
    print("1. Sjekk at enheten ikke er p√• lydl√∏s")
    print("2. Trykk p√• den orange 'Trykk for lyd' knappen som vises")
    print("3. Sjekk browser console for feilmeldinger")
    print("4. Test p√• forskjellige browsere")
    
    return True

if __name__ == "__main__":
    print("üîß SmartReminder Notifikasjonssystem - Fiks Test")
    print("================================================")
    
    success = test_notification_fixes()
    
    if success:
        print("\n‚úÖ ALLE TESTER BEST√ÖTT!")
        print("Notifikasjonssystemet b√∏r n√• fungere mye bedre.")
    else:
        print("\n‚ùå NOEN TESTER FEILET!")
        print("Se feilmeldingene over for detaljer.")
    
    print("\nüëÜ Test ferdig!")
